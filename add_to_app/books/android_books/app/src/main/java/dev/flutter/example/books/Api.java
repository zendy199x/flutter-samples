// Autogenerated from Pigeon (v0.1.17), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.example.books;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Book {
    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String subtitle;
    public String getSubtitle() { return subtitle; }
    public void setSubtitle(String setterArg) { this.subtitle = setterArg; }

    private String author;
    public String getAuthor() { return author; }
    public void setAuthor(String setterArg) { this.author = setterArg; }

    private String summary;
    public String getSummary() { return summary; }
    public void setSummary(String setterArg) { this.summary = setterArg; }

    private String publishDate;
    public String getPublishDate() { return publishDate; }
    public void setPublishDate(String setterArg) { this.publishDate = setterArg; }

    private Long pageCount;
    public Long getPageCount() { return pageCount; }
    public void setPageCount(Long setterArg) { this.pageCount = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("subtitle", subtitle);
      toMapResult.put("author", author);
      toMapResult.put("summary", summary);
      toMapResult.put("publishDate", publishDate);
      toMapResult.put("pageCount", pageCount);
      return toMapResult;
    }
    static Book fromMap(HashMap map) {
      Book fromMapResult = new Book();
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object subtitle = map.get("subtitle");
      fromMapResult.subtitle = (String)subtitle;
      Object author = map.get("author");
      fromMapResult.author = (String)author;
      Object summary = map.get("summary");
      fromMapResult.summary = (String)summary;
      Object publishDate = map.get("publishDate");
      fromMapResult.publishDate = (String)publishDate;
      Object pageCount = map.get("pageCount");
      fromMapResult.pageCount = (pageCount == null) ? null : ((pageCount instanceof Integer) ? (Integer)pageCount : (Long)pageCount);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class FlutterBookApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterBookApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void displayBookDetails(Book argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterBookApi.displayBookDetails", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostBookApi {
    void cancel();
    void finishEditingBook(Book arg);

    /** Sets up an instance of `HostBookApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, HostBookApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostBookApi.cancel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              api.cancel();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostBookApi.finishEditingBook", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              Book input = Book.fromMap((HashMap)message);
              api.finishEditingBook(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
